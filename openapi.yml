openapi: '3.0.3'
info:
  title: FBN Radio API
  description: Documentation for FBN Radio API
  version: '1.0'
servers:
  - url: https://fbnradio.ddns.net
    description: Staging Environment
  - url: http://localhost:8000
    description: Development Environment
paths:
  /api/register:
    post:
      tags: [User]
      summary: Register as a user
      description: Register as a user
      requestBody:
        description: Data for user registration
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                first_name:
                  description: The first name of the user
                  type: string
                  example: oluyemi
                last_name:
                  description: The last name of the user
                  type: string
                  example: adebayo
                email:
                  description: The email of the user
                  type: string
                  example: oluyemiadebayo@fbn.com
                password:
                  description: The password of the user
                  type: string
                  format: password
                  example: password
                password_confirmation:
                  description: The password confirmation of the user
                  type: string
                  format: password
                  example: password
              required:
                - first_name
                - last_name
                - email
                - password
                - password_confirmation
        required: true
      responses:
        '201':
          description: User registered
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/login:
    post:
      tags: [User]
      summary: Login as a user
      description: Login as a user
      requestBody:
        description: Data for user login
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  description: The email of the user
                  type: string
                  example: oluyemiadebayo@fbn.com
                password:
                  description: The password of the user
                  type: string
                  format: password
                  example: password
              required:
                - email
                - password
        required: true
      responses:
        '200':
          description: Login successful
        '401':
          description: Unauthenticated
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/login-with-google:
    post:
      tags: [User]
      summary: Login as a user using Google authentication
      description: Login as a user using Google authentication
      requestBody:
        description: Data for user login
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                access_token:
                  description: The access token generated by Google
                  type: string
                  example: ya29.a0AX9GBdXupJqC7kC_S2pjaqJVhPoYzzCJoc7-GGXWRFzRC6JPKf3ncS1zIwpyAlKY9ekCvNKgUNkywKlA5VWRHLd38HcLDnC6xh4YxjMHzENsEJU81weu2d_ntB8EfkjeFdZkY7zjjEA7chu2_NeNtteGqXWSaCgYKAacSARMSFQHUCsbCzq7kzuSqQkRU64siQLiU-Q0163
              required:
                - access_token
        required: true
      responses:
        '200':
          description: Login successful
        '401':
          description: Unauthenticated
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/login-with-facebook:
    post:
      tags: [User]
      summary: Login as a user using Facebook authentication
      description: Login as a user using Facebook authentication
      requestBody:
        description: Data for user login
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                access_token:
                  description: The access token generated by Facebook
                  type: string
                  example: EAAHc6ZBTxFEABABhP9YyBa2MH2SIpUBF1RjmmEByipU9smgH8NZAqCDG1XQPQYGvAmEhWXZAqUrynZBZC2nH0JxcbZA04L7RxVq4JNMHGpryeq0Tm9CMkxHkPL523THPPUoRoOKWRq21Tq3ZCQMLBHerTyJ0HrVPJPccmy3ygAca446w9qjP3zD8IOcKJaZBTFqs8dvpivaSjIKTDustKRDZBSkRpw1k8dZB1Jk01DKA1I2XLZBzjexBxV7
              required:
                - access_token
        required: true
      responses:
        '200':
          description: Login successful
        '401':
          description: Unauthenticated
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/verify-email:
    get:
      tags: [User]
      summary: Verify the email of a user
      description: Verify the email of a user
      parameters:
        - name: token
          in: query
          description: The token for sent to the verification mail
          required: true
          schema:
            type: string
            example: 2978b00f71cd3887a0453736e8ea1affae714437f89135969c8179399089b2ecff6ce4ad27e42aee7c3751a2a71a27db53db0802d0c435bb3b899777bce9961a
      responses:
        '200':
          description: Verification successful, Verification failed
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/resend-verification-email:
    post:
      tags: [User]
      summary: Resend the verification email of a user
      description: Resend the verification email of a user
      requestBody:
        description: Data for user email verification
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  description: The email of the user
                  type: string
                  example: oluyemiadebayo@fbn.com
              required:
                - email
        required: true
      responses:
        '200':
          description: Login successful
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/forgot-password:
    post:
      tags: [User]
      summary: Initiate forgot password process
      description: Initiate forgot password process
      requestBody:
        description: Data for initiating forgot password
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  description: The email of the user
                  type: string
                  example: oluyemiadebayo@fbn.com
              required:
                - email
        required: true
      responses:
        '200':
          description: Forgot password initiated
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/reset-password:
    put:
      tags: [User]
      summary: Reset the password of a user
      description: Reset the password of a user
      requestBody:
        description: Data for resetting password of a user
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                password:
                  description: The password of the user
                  type: string
                  format: password
                  example: password
                password_confirmation:
                  description: The password confirmation of the user
                  type: string
                  format: password
                  example: password
                token:
                  description: The token sent to the password reset mail
                  type: string
                  example: 2978b00f71cd3887a0453736e8ea1affae714437f89135969c8179399089b2ecff6ce4ad27e42aee7c3751a2a71a27db53db0802d0c435bb3b899777bce9961a
              required:
                - password
                - password_confirmation
                - token
        required: true
      responses:
        '200':
          description: Password reset successfully
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/categories:
    get:
      tags: [User]
      summary: Get categories
      description: Get categories
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/categories/{categoryId}:
    get:
      tags: [User]
      summary: Get a category
      description: Get a category
      parameters:
        - name: categoryId
          in: path
          description: The ID of the category
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Request successful
        '404':
          description: Category not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/categories/{categoryId}/podcasts:
    get:
      tags: [User]
      summary: Get podcasts in a category
      description: Get podcasts in a category
      parameters:
        - name: categoryId
          in: path
          description: The ID of the category
          required: true
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/categories/{categoryId}/shows:
    get:
      tags: [User]
      summary: Get shows in a category
      description: Get shows in a category
      parameters:
        - name: categoryId
          in: path
          description: The ID of the category
          required: true
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/podcasts:
    get:
      tags: [User]
      summary: Get podcasts
      description: Get podcasts
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/podcasts/{podcastId}:
    get:
      tags: [User]
      summary: Get a podcast
      description: Get a podcast
      parameters:
        - name: podcastId
          in: path
          description: The ID of the podcast
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Request successful
        '404':
          description: Podcast not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/podcasts/{podcastId}/contents:
    get:
      tags: [User]
      summary: Get the contents of a podcast
      description: Get the contents of a podcast
      parameters:
        - name: podcastId
          in: path
          description: The ID of the podcast
          required: true
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '404':
          description: Podcast not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/shows:
    get:
      tags: [User]
      summary: Get shows
      description: Get shows
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/shows/{showId}:
    get:
      tags: [User]
      summary: Get a show
      description: Get a show
      parameters:
        - name: showId
          in: path
          description: The ID of the show
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Request successful
        '404':
          description: Show not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/shows/{showId}/contents:
    get:
      tags: [User]
      summary: Get the contents of a show
      description: Get the contents of a show
      parameters:
        - name: showId
          in: path
          description: The ID of the show
          required: true
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '404':
          description: Show not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/discover:
    get:
      tags: [User]
      summary: Discover contents
      description: Discover contents
      parameters:
        - name: tag
          in: query
          description: The tag to search for
          required: true
          schema:
            type: string
            example: fashion
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/popular-podcasts:
    get:
      tags: [User]
      summary: Get the popular podcasts
      description: Get the popular podcasts
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/popular-shows:
    get:
      tags: [User]
      summary: Get the popular shows
      description: Get the popular shows
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/latest-episodes:
    get:
      tags: [User]
      summary: Get the latest episodes
      description: Get the latest episodes
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/latest-audios:
    get:
      tags: [User]
      summary: Get the latest audios
      description: Get the latest audios
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/latest-videos:
    get:
      tags: [User]
      summary: Get the latest videos
      description: Get the latest videos
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/top-audios:
    get:
      tags: [User]
      summary: Get the top audios
      description: Get the top audios
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/top-videos:
    get:
      tags: [User]
      summary: Get the top videos
      description: Get the top videos
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/recent-uploads:
    get:
      tags: [User]
      summary: Get the recent uploads
      description: Get the recent uploads
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/search-contents:
    get:
      tags: [User]
      summary: Search for a content
      description: Search for a content
      parameters:
        - name: title
          in: query
          description: Text that is contained in the title of the content (Required if "text" is empty)
          required: false
          schema:
            type: string
            example: generation
        - name: text
          in: query
          description: Text that is contained in the summary or body of the content (Required if "title" is empty)
          required: false
          schema:
            type: string
            example: generational
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/search-podcasts:
    get:
      tags: [User]
      summary: Search for a podcast
      description: Search for a podcast
      parameters:
        - name: name
          in: query
          description: Text that is contained in the name of the podcast
          required: true
          schema:
            type: string
            example: ladies
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/search-shows:
    get:
      tags: [User]
      summary: Search for a show
      description: Search for a show
      parameters:
        - name: name
          in: query
          description: Text that is contained in the name of the show
          required: true
          schema:
            type: string
            example: zone
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/live-radio:
    get:
      tags: [User]
      summary: Get the live radio details
      description: Get the live radio details
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/live-events:
    get:
      tags: [User]
      summary: Get live events
      description: Get live events
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/live-events/upcoming:
    get:
      tags: [User]
      summary: Get upcoming live events
      description: Get upcoming live events
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/live-events/{liveEventId}:
    get:
      tags: [User]
      summary: Get a live event
      description: Get a live event
      parameters:
        - name: liveEventId
          in: path
          description: The ID of the live event
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Request successful
        '404':
          description: Live event not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/adverts:
    get:
      tags: [User]
      summary: Get adverts by a user
      description: Get adverts by a user
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/adverts/{advertId}:
    get:
      tags: [User]
      summary: Get an advert by a user
      description: Get an advert by a user
      parameters:
        - name: advertId
          in: path
          description: The ID of the advert
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Request successful
        '404':
          description: Advert not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/adverts/{advertId}/impressions:
    post:
      tags: [User]
      summary: Interact with an advert (Increases the impressions counter)
      description: Interact with an advert (Increases the impressions counter)
      parameters:
        - name: advertId
          in: path
          description: The ID of the advert
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Request successful
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/change-password:
    put:
      tags: [User]
      summary: Change password
      description: Change password
      requestBody:
        description: Data for changing password
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                current_password:
                  description: The current password of the user
                  type: string
                  format: password
                  example: password
                password:
                  description: The new password of the user
                  type: string
                  format: password
                  example: newpassword
                password_confirmation:
                  description: The new password confirmation of the user
                  type: string
                  format: password
                  example: newpassword
              required:
                - current_password
                - password
                - password_confirmation
        required: true
      responses:
        '200':
          description: Password changed successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/contents/{contentId}/comments:
    get:
      tags: [User]
      summary: Get comments on a content
      description: Get comments on a content
      parameters:
        - name: contentId
          in: path
          description: The ID of the content
          required: true
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Content not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
    post:
      tags: [User]
      summary: Create a comment on a content
      description: Create a comment on a content
      parameters:
        - name: contentId
          in: path
          description: The ID of the content
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Data for creating a comment
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                body:
                  description: The body of the comment
                  type: string
                  example: This is the best thing I have ever seen and listened to
              required:
                - body
        required: true
      responses:
        '201':
          description: Comment created successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Content not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/contents/{contentId}/comments/{commentId}:
    parameters:
      - name: contentId
        in: path
        description: The ID of the content
        required: true
        schema:
          type: integer
          example: 1
      - name: commentId
        in: path
        description: The ID of the comment
        required: true
        schema:
          type: integer
          example: 1
    get:
      tags: [User]
      summary: Get a comment on a content
      description: Get a comment on a content
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Content not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
    put:
      tags: [User]
      summary: Update a comment on a content
      description: Update a comment on a content
      requestBody:
        description: Data for creating a comment
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                body:
                  description: The body of the comment
                  type: string
                  example: This is the best thing I have ever seen and listened to
              required:
                - body
        required: true
      responses:
        '200':
          description: Comment updated successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Content not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    delete:
      tags: [User]
      summary: Delete a comment on a content
      description: Delete a comment on a content
      responses:
        '200':
          description: Comment deleted successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Content not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/contents/{contentId}/like:
    post:
      tags: [User]
      summary: Like a content
      description: Like a content
      parameters:
        - name: contentId
          in: path
          description: The ID of the content
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Content liked successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Content not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/contents/{contentId}/dislike:
    post:
      tags: [User]
      summary: Dislike a content
      description: Dislike a content
      parameters:
        - name: contentId
          in: path
          description: The ID of the content
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Content disliked successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Content not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/contents/{contentId}/queue:
    post:
      tags: [User]
      summary: Add a content to the queue
      description: Add a content to the queue
      parameters:
        - name: contentId
          in: path
          description: The ID of the content
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Content added to queue successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Content not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/contents/{contentId}/unqueue:
    post:
      tags: [User]
      summary: Remove a content from the queue
      description: Remove a content from the queue
      parameters:
        - name: contentId
          in: path
          description: The ID of the content
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Content removed from queue successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Content not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/contents/{contentId}/favourite:
    post:
      tags: [User]
      summary: Add a content to favourites
      description: Add a content to favourites
      parameters:
        - name: contentId
          in: path
          description: The ID of the content
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Content added to favourites successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Content not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/contents/{contentId}/unfavourite:
    post:
      tags: [User]
      summary: Remove a content from favourites
      description: Remove a content from favourites
      parameters:
        - name: contentId
          in: path
          description: The ID of the content
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Content removed from favourites successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Content not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/contents/{contentId}/viewed:
    post:
      tags: [User]
      summary: Log a content as viewed
      description: Log a content as viewed
      parameters:
        - name: contentId
          in: path
          description: The ID of the content
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Content logged as viewed
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Content not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/contents/{contentId}/is-liked:
    get:
      tags: [User]
      summary: Check if a content is liked by a user
      description: Check if a content is liked by a user
      parameters:
        - name: contentId
          in: path
          description: The ID of the content
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Content not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/contents/{contentId}/is-queued:
    get:
      tags: [User]
      summary: Check if a content is queued by a user
      description: Check if a content is queued by a user
      parameters:
        - name: contentId
          in: path
          description: The ID of the content
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Content not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/contents/{contentId}/is-favourite:
    get:
      tags: [User]
      summary: Check if a content has been added to favourites by a user
      description: Check if a content has been added to favourites by a user
      parameters:
        - name: contentId
          in: path
          description: The ID of the content
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Content not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/contents/{contentId}/is-viewed:
    get:
      tags: [User]
      summary: Check if a content has been viewed by a user
      description: Check if a content has been viewed by a user
      parameters:
        - name: contentId
          in: path
          description: The ID of the content
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Content not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/queues:
    get:
      tags: [User]
      summary: Get queued contents
      description: Get queued contents
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/favourites:
    get:
      tags: [User]
      summary: Get favourite contents
      description: Get favourite contents
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/playlists:
    get:
      tags: [User]
      summary: Get playlists
      description: Get playlists
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    post:
      tags: [User]
      summary: Create a playlist
      description: Create a playlist
      requestBody:
        description: Data for creating a playlist
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: The name of the playlist
                  type: string
                  example: soul
              required:
                - name
        required: true
      responses:
        '201':
          description: Playlist created successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/playlists/{playlistId}:
    parameters:
      - name: playlistId
        in: path
        description: The ID of the playlist
        required: true
        schema:
          type: integer
          example: 1
    get:
      tags: [User]
      summary: Get a playlist
      description: Get a playlist
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Playlist not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    put:
      tags: [User]
      summary: Update a playlist
      description: Update a playlist
      requestBody:
        description: Data for updating a playlist
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: The name of the playlist
                  type: string
                  example: soul
              required:
                - name
        required: true
      responses:
        '200':
          description: Playlist updated successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Playlist not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    delete:
      tags: [User]
      summary: Delete a playlist
      description: Delete a playlist
      responses:
        '200':
          description: Playlist deleted successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Playlist not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/playlists/{playlistId}/add:
    post:
      tags: [User]
      summary: Add content to playlist
      description: Add content to playlist
      parameters:
        - name: playlistId
          in: path
          description: The ID of the playlist
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Data for adding content to playlist
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                content_id:
                  description: The ID of the content
                  type: integer
                  example: 1
              required:
                - content_id
        required: true
      responses:
        '200':
          description: Content added to playlist successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Playlist not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/playlists/{playlistId}/remove:
    post:
      tags: [User]
      summary: Remove content from playlist
      description: Remove content from playlist
      parameters:
        - name: playlistId
          in: path
          description: The ID of the playlist
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Data for removing content from playlist
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                content_id:
                  description: The ID of the content
                  type: integer
                  example: 1
              required:
                - content_id
        required: true
      responses:
        '200':
          description: Content removed to playlist successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Playlist not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/playlists/{playlistId}/contents:
    get:
      tags: [User]
      summary: Get the contents of a playlist
      description: Get the contents of a playlist
      parameters:
        - name: playlistId
          in: path
          description: The ID of the playlist
          required: true
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Podcast not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/podcasts/following:
    get:
      tags: [User]
      summary: Get the podcasts followed by a user
      description: Get the podcasts followed by a user
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/podcasts/{podcastId}/follow:
    post:
      tags: [User]
      summary: Follow a podcast
      description: Follow a podcast
      parameters:
        - name: podcastId
          in: path
          description: The ID of the podcast
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Podcast followed successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Podcast not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/podcasts/{podcastId}/unfollow:
    post:
      tags: [User]
      summary: Unfollow a podcast
      description: Unfollow a podcast
      parameters:
        - name: podcastId
          in: path
          description: The ID of the podcast
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Podcast unfollowed successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Podcast not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/podcasts/{podcastId}/is-following:
    get:
      tags: [User]
      summary: Check if a user is following a podcast
      description: Check if a user is following a podcast
      parameters:
        - name: podcastId
          in: path
          description: The ID of the podcast
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Podcast not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/shows/following:
    get:
      tags: [User]
      summary: Get the shows followed by a user
      description: Get the shows followed by a user
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/shows/{showId}/follow:
    post:
      tags: [User]
      summary: Follow a show
      description: Follow a show
      parameters:
        - name: showId
          in: path
          description: The ID of the show
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Show followed successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Show not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/shows/{showId}/unfollow:
    post:
      tags: [User]
      summary: Unfollow a show
      description: Unfollow a show
      parameters:
        - name: showId
          in: path
          description: The ID of the show
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Show unfollowed successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Show not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/shows/{showId}/is-following:
    get:
      tags: [User]
      summary: Check if a user is following a show
      description: Check if a user is following a show
      parameters:
        - name: showId
          in: path
          description: The ID of the show
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Show not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/recently-played:
    get:
      tags: [User]
      summary: Get the recently played contents
      description: Get the recently played contents
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/featured-podcasts:
    get:
      tags: [User]
      summary: Get the featured podcasts
      description: Get the featured podcasts
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/featured-shows:
    get:
      tags: [User]
      summary: Get the featured shows
      description: Get the featured shows
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/suggested-podcasts:
    get:
      tags: [User]
      summary: Get suggested podcasts to follow
      description: Get suggested podcasts to follow
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/suggested-shows:
    get:
      tags: [User]
      summary: Get suggested shows to follow
      description: Get suggested shows to follow
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/recommended-podcasts:
    get:
      tags: [User]
      summary: Get the recommended podcasts to follow
      description: Get the recommended podcasts to follow
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/recommended-shows:
    get:
      tags: [User]
      summary: Get the recommended shows to follow
      description: Get the recommended shows to follow
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/recommended-audios:
    get:
      tags: [User]
      summary: Get recommended audios
      description: Get recommended audios
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/recommended-videos:
    get:
      tags: [User]
      summary: Get recommended videos
      description: Get recommended videos
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []




  /api/logout:
    post:
      tags: [General]
      summary: Logout
      description: Logout
      responses:
        '200':
          description: Logout successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/profile:
    put:
      tags: [General]
      summary: Update profile
      description: Update profile
      requestBody:
        description: Data for updating profile
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                first_name:
                  description: The first name of the user
                  type: string
                  example: oluyemi
                last_name:
                  description: The last name of the user
                  type: string
                  example: adebayo
                email:
                  description: The email of the user
                  type: string
                  example: oluyemiadebayo@fbn.com
                phone:
                  description: The phone of the user
                  type: string
                  example: '08123456789'
              required:
                - first_name
                - last_name
                - email
                - phone
        required: true
      responses:
        '200':
          description: Profile updated successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []




  /api/admin/register:
    post:
      tags: [Administrator]
      summary: Register as an administator (For Development Purposes)
      description: Register as an administator (For Development Purposes)
      requestBody:
        description: Data for administator registration
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                first_name:
                  description: The first name of the administrator
                  type: string
                  example: oluyemi
                last_name:
                  description: The last name of the administrator
                  type: string
                  example: adebayo
                email:
                  description: The email of the administrator
                  type: string
                  example: oluyemiadebayo@fbn.com
                password:
                  description: The password of the administrator
                  type: string
                  format: password
                  example: password
                password_confirmation:
                  description: The password confirmation of the administrator
                  type: string
                  format: password
                  example: password
              required:
                - first_name
                - last_name
                - email
                - password
                - password_confirmation
        required: true
      responses:
        '201':
          description: Administrator registered
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/admin/login:
    post:
      tags: [Administrator]
      summary: Login as an administator
      description: Login as an administator
      requestBody:
        description: Data for administator login
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  description: The email of the administator
                  type: string
                  example: oluyemiadebayo@fbn.com
                password:
                  description: The password of the administator
                  type: string
                  format: password
                  example: password
              required:
                - email
                - password
        required: true
      responses:
        '200':
          description: Login successful
        '401':
          description: Unauthenticated
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/admin/forgot-password:
    post:
      tags: [Administrator]
      summary: Initiate forgot password process for an administrator
      description: Initiate forgot password process for an administrator
      requestBody:
        description: Data for initiating forgot password for an administrator
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  description: The email of the administrator
                  type: string
                  example: oluyemiadebayo@fbn.com
              required:
                - email
        required: true
      responses:
        '200':
          description: Admin forgot password initiated
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/admin/reset-password:
    put:
      tags: [Administrator]
      summary: Reset the password of an administrator
      description: Reset the password of an administrator
      requestBody:
        description: Data for resetting password of an administrator
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                password:
                  description: The password of the administrator
                  type: string
                  format: password
                  example: password
                password_confirmation:
                  description: The password confirmation of the administrator
                  type: string
                  format: password
                  example: password
                token:
                  description: The token sent to the password reset mail
                  type: string
                  example: 2978b00f71cd3887a0453736e8ea1affae714437f89135969c8179399089b2ecff6ce4ad27e42aee7c3751a2a71a27db53db0802d0c435bb3b899777bce9961a
              required:
                - password
                - password_confirmation
                - token
        required: true
      responses:
        '200':
          description: Admin password reset successfully
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
  /api/admin/change-password:
    put:
      tags: [Administrator]
      summary: Change password for an administrator
      description: Change password for an administrator
      requestBody:
        description: Data for changing password for an administrator
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                current_password:
                  description: The current password of the administrator
                  type: string
                  format: password
                  example: password
                password:
                  description: The new password of the administrator
                  type: string
                  format: password
                  example: newpassword
                password_confirmation:
                  description: The new password confirmation of the administrator
                  type: string
                  format: password
                  example: newpassword
              required:
                - current_password
                - password
                - password_confirmation
        required: true
      responses:
        '200':
          description: Administrative password changed successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/admin/categories:
    post:
      tags: [Administrator]
      summary: Create a category
      description: Create a category
      requestBody:
        description: Data for creating a category
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  description: The name of the category
                  type: string
                  example: fashion
                image:
                  description: The display image of the category
                  type: string
                  format: binary
              required:
                - name
        required: true
      responses:
        '201':
          description: Category created successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/admin/categories/{categoryId}:
    parameters:
      - name: categoryId
        in: path
        description: The ID of the category
        required: true
        schema:
          type: integer
          example: 1
    post:
      tags: [Administrator]
      summary: Update a category
      description: Update a category
      requestBody:
        description: Data for updating a category
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  description: The name of the category
                  type: string
                  example: fashion
                image:
                  description: The display image of the category
                  type: string
                  format: binary
              required:
                - name
        required: true
      responses:
        '200':
          description: Category updated successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Category not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    delete:
      tags: [Administrator]
      summary: Delete a category
      description: Delete a category
      responses:
        '200':
          description: Category deleted successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Category not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/admin/tags:
    get:
      tags: [Administrator]
      summary: Get tags
      description: Get tags
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    post:
      tags: [Administrator]
      summary: Create a tag
      description: Create a tag
      requestBody:
        description: Data for creating a tag
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: The name of the tag
                  type: string
                  example: shopping
              required:
                - name
        required: true
      responses:
        '201':
          description: Tag created successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/admin/tags/{tagId}:
    parameters:
      - name: tagId
        in: path
        description: The ID of the tag
        required: true
        schema:
          type: integer
          example: 1
    get:
      tags: [Administrator]
      summary: Get a tag
      description: Get a tag
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Tag not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    put:
      tags: [Administrator]
      summary: Update a tag
      description: Update a tag
      requestBody:
        description: Data for updating a tag
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: The name of the tag
                  type: string
                  example: shopping
              required:
                - name
        required: true
      responses:
        '200':
          description: Tag updated successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Tag not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    delete:
      tags: [Administrator]
      summary: Delete a tag
      description: Delete a tag
      responses:
        '200':
          description: Tag deleted successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Tag not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/admin/contents:
    get:
      tags: [Administrator]
      summary: Get contents
      description: Get contents
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    post:
      tags: [Administrator]
      summary: Create a content
      description: Create a content
      requestBody:
        description: Data for creating a content
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                show_or_podcast_id:
                  description: The ID of the show or podcast
                  type: integer
                  example: 1
                title:
                  description: The title of the content
                  type: string
                  example: Creating generational wealth before age 50
                description:
                  description: The description of the content
                  type: string
                  example: Generational wealth is what we all want in life
                media_url:
                  description: The URL of the media content
                  type: string
                  example: https://api.spreaker.com/download/episode/52561226/ladies_lounge_piggy_bank_savings_12_1_2023_m.mp3
                author:
                  description: The author of the content
                  type: string
                  example: Oluyemi adebayo
                subtitle:
                  description: The subtitle of the content
                  type: string
                  example: Generational wealth before 50
                summary:
                  description: The summary of the content
                  type: string
                  example: Generational wealth before 50
                duration_in_minutes:
                  description: The duration of the content in minutes
                  type: integer
                  example: 30
                type:
                  description: The content type of the content
                  type: string
                  example: audio/mp3
                upload_as:
                  description: The type of content which the content is uploaded as
                  type: string
                  enum:
                    - PODCAST
                    - SHOW
                explicit:
                  description: The level of the content in explicit terms
                  type: string
                  example: clean
                season:
                  description: The season which the content belongs to
                  type: integer
                  example: 1
                episode_type:
                  description: The type of content as regards to the length
                  type: string
                  example: full
                image:
                  description: The image of the content
                  type: string
                  format: binary
                tag_ids[]:
                  description: The ID(s) of the tags
                  type: array
                  items:
                    type: integer
                    example: 1
              required:
                - show_or_podcast_id
                - title
                - description
                - media_url
                - author
                - subtitle
                - summary
                - duration_in_minutes
                - type
                - upload_as
            encoding:
              tag_ids[]:
                style: form
        required: true
      responses:
        '201':
          description: Content created successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/admin/contents/{contentId}:
    parameters:
      - name: contentId
        in: path
        description: The ID of the content
        required: true
        schema:
          type: integer
          example: 1
    get:
      tags: [Administrator]
      summary: Get a content
      description: Get a content
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Content not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    post:
      tags: [Administrator]
      summary: Update a content
      description: Update a content
      requestBody:
        description: Data for updating a content
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                show_or_podcast_id:
                  description: The ID of the show or podcast
                  type: integer
                  example: 1
                title:
                  description: The title of the content
                  type: string
                  example: Creating generational wealth before age 50
                description:
                  description: The description of the content
                  type: string
                  example: Generational wealth is what we all want in life
                media_url:
                  description: The URL of the media content
                  type: string
                  example: https://api.spreaker.com/download/episode/52561226/ladies_lounge_piggy_bank_savings_12_1_2023_m.mp3
                author:
                  description: The author of the content
                  type: string
                  example: Oluyemi adebayo
                subtitle:
                  description: The subtitle of the content
                  type: string
                  example: Generational wealth before 50
                summary:
                  description: The summary of the content
                  type: string
                  example: Generational wealth before 50
                duration_in_minutes:
                  description: The duration of the content in minutes
                  type: integer
                  example: 30
                type:
                  description: The content type of the content
                  type: string
                  example: audio/mp3
                upload_as:
                  description: The type of content which the content is uploaded as
                  type: string
                  enum:
                    - PODCAST
                    - SHOW
                explicit:
                  description: The level of the content in explicit terms
                  type: string
                  example: clean
                season:
                  description: The season which the content belongs to
                  type: integer
                  example: 1
                episode_type:
                  description: The type of content as regards to the length
                  type: string
                  example: full
                image:
                  description: The image of the content
                  type: string
                  format: binary
                tag_ids[]:
                  description: The ID(s) of the tags
                  type: array
                  items:
                    type: integer
                    example: 1
              required:
                - show_or_podcast_id
                - title
                - description
                - media_url
                - author
                - subtitle
                - summary
                - duration_in_minutes
                - type
                - upload_as
            encoding:
              tag_ids[]:
                style: form
        required: true
      responses:
        '200':
          description: Content updated successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Content not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    delete:
      tags: [Administrator]
      summary: Delete a content
      description: Delete a content
      responses:
        '200':
          description: Content deleted successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Content not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/admin/podcasts:
    get:
      tags: [Administrator]
      summary: Get podcasts
      description: Get podcasts
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    post:
      tags: [Administrator]
      summary: Create a podcast
      description: Create a podcast
      requestBody:
        description: Data for creating a podcast
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                category_id:
                  description: The ID of the category
                  type: integer
                  example: 1
                name:
                  description: The name of the podcast
                  type: string
                  example: guys zone
                description:
                  description: The description of the podcast
                  type: string
                  example: The podcast for all things men related
                link:
                  description: The link to the podcast
                  type: string
                  example: https://www.spreaker.com/show/entrepreneurship-showcase
                subtitle:
                  description: The subtitle of the podcast
                  type: string
                  example: The podcast made for men
                summary:
                  description: The summary of the podcast
                  type: string
                  example: The podcast made for men
                owner_name:
                  description: The name of the owner of the podcast
                  type: string
                  example: Oluyemi Adebayo
                owner_email:
                  description: The email of the owner of the podcast
                  type: string
                  example: oluyemiadebayo@fbn.com
                explicit:
                  description: The level of the content in explicit terms
                  type: string
                  example: clean
                type:
                  description: The type of the frequency of the release of the podcast
                  type: string
                  example: episodic
                image:
                  description: The display image of the podcast
                  type: string
                  format: binary
              required:
                - category_id
                - name
                - description
                - link
                - subtitle
                - summary
                - owner_name
        required: true
      responses:
        '201':
          description: Podcast created successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/admin/podcasts/{podcastId}:
    parameters:
      - name: podcastId
        in: path
        description: The ID of the podcast
        required: true
        schema:
          type: integer
          example: 1
    get:
      tags: [Administrator]
      summary: Get a podcast
      description: Get a podcast
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Podcast not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    post:
      tags: [Administrator]
      summary: Update a podcast
      description: Update a podcast
      requestBody:
        description: Data for updating a podcast
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                category_id:
                  description: The ID of the category
                  type: integer
                  example: 1
                name:
                  description: The name of the podcast
                  type: string
                  example: guys zone
                description:
                  description: The description of the podcast
                  type: string
                  example: The podcast for all things men related
                link:
                  description: The link to the podcast
                  type: string
                  example: https://www.spreaker.com/show/entrepreneurship-showcase
                subtitle:
                  description: The subtitle of the podcast
                  type: string
                  example: The podcast made for men
                summary:
                  description: The summary of the podcast
                  type: string
                  example: The podcast made for men
                owner_name:
                  description: The name of the owner of the podcast
                  type: string
                  example: Oluyemi Adebayo
                owner_email:
                  description: The email of the owner of the podcast
                  type: string
                  example: oluyemiadebayo@fbn.com
                explicit:
                  description: The level of the content in explicit terms
                  type: string
                  example: clean
                type:
                  description: The type of the frequency of the release of the podcast
                  type: string
                  example: episodic
                image:
                  description: The display image of the podcast
                  type: string
                  format: binary
              required:
                - category_id
                - name
                - description
                - link
                - subtitle
                - summary
                - owner_name
        required: true
      responses:
        '200':
          description: Podcast updated successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Podcast not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    delete:
      tags: [Administrator]
      summary: Delete a podcast
      description: Delete a podcast
      responses:
        '200':
          description: Podcast deleted successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Podcast not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/admin/podcasts/{podcastId}/contents:
    get:
      tags: [Administrator]
      summary: Get the contents of a podcast
      description: Get the contents of a podcast
      parameters:
        - name: podcastId
          in: path
          description: The ID of the podcast
          required: true
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Podcast not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/admin/shows:
    get:
      tags: [Administrator]
      summary: Get shows
      description: Get shows
      parameters:
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    post:
      tags: [Administrator]
      summary: Create a show
      description: Create a show
      requestBody:
        description: Data for creating a show
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                category_id:
                  description: The ID of the category
                  type: integer
                  example: 1
                name:
                  description: The name of the show
                  type: string
                  example: Chilling with Ademorayo
                description:
                  description: The description of the show
                  type: string
                  example: The show for all things men related
                link:
                  description: The link to the show
                  type: string
                  example: https://www.spreaker.com/show/entrepreneurship-showcase
                subtitle:
                  description: The subtitle of the show
                  type: string
                  example: The show made for men
                summary:
                  description: The summary of the show
                  type: string
                  example: The show made for men
                owner_name:
                  description: The name of the owner of the show
                  type: string
                  example: Oluyemi Adebayo
                owner_email:
                  description: The email of the owner of the show
                  type: string
                  example: oluyemiadebayo@fbn.com
                explicit:
                  description: The level of the content in explicit terms
                  type: string
                  example: clean
                type:
                  description: The type of the frequency of the release of the show
                  type: string
                  example: episodic
                image:
                  description: The display image of the show
                  type: string
                  format: binary
              required:
                - category_id
                - name
                - description
                - link
                - subtitle
                - summary
                - owner_name
        required: true
      responses:
        '201':
          description: Show created successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/admin/shows/{showId}:
    parameters:
      - name: showId
        in: path
        description: The ID of the show
        required: true
        schema:
          type: integer
          example: 1
    get:
      tags: [Administrator]
      summary: Get a show
      description: Get a show
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Show not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    post:
      tags: [Administrator]
      summary: Update a show
      description: Update a show
      requestBody:
        description: Data for updating a show
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                category_id:
                  description: The ID of the category
                  type: integer
                  example: 1
                name:
                  description: The name of the show
                  type: string
                  example: Chilling with Ademorayo
                description:
                  description: The description of the show
                  type: string
                  example: The show for all things men related
                link:
                  description: The link to the show
                  type: string
                  example: https://www.spreaker.com/show/entrepreneurship-showcase
                subtitle:
                  description: The subtitle of the show
                  type: string
                  example: The show made for men
                summary:
                  description: The summary of the show
                  type: string
                  example: The show made for men
                owner_name:
                  description: The name of the owner of the show
                  type: string
                  example: Oluyemi Adebayo
                owner_email:
                  description: The email of the owner of the show
                  type: string
                  example: oluyemiadebayo@fbn.com
                explicit:
                  description: The level of the content in explicit terms
                  type: string
                  example: clean
                type:
                  description: The type of the frequency of the release of the show
                  type: string
                  example: episodic
                image:
                  description: The display image of the show
                  type: string
                  format: binary
              required:
                - category_id
                - name
                - description
                - link
                - subtitle
                - summary
                - owner_name
        required: true
      responses:
        '200':
          description: Show updated successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Show not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    delete:
      tags: [Administrator]
      summary: Delete a show
      description: Delete a show
      responses:
        '200':
          description: Show deleted successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Show not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/admin/shows/{showId}/contents:
    get:
      tags: [Administrator]
      summary: Get the contents of a show
      description: Get the contents of a show
      parameters:
        - name: showId
          in: path
          description: The ID of the show
          required: true
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: The current page
          required: false
          schema:
            type: integer
            example: 1
        - name: per_page
          in: query
          description: The number of items to return per page (Default is 20)
          required: false
          schema:
            type: integer
            example: 15
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Show not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/admin/feeds:
    post:
      tags: [Administrator]
      summary: Upload an RSS feed
      description: Upload an RSS feed
      requestBody:
        description: Data for uploading RSS feed
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                url:
                  description: The URL of the RSS feed
                  type: string
                  example: https://www.spreaker.com/show/4113706/episodes/feed
              required:
                - url
        required: true
      responses:
        '200':
          description: Feed uploaded successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/admin/live-radio:
    post:
      tags: [Administrator]
      summary: Update the live radio details
      description: Update the live radio details
      requestBody:
        description: Data for updating live radio details
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                link:
                  description: The link to the live radio
                  type: string
                  example: https://live.spreaker.com/fbn
              required:
                - link
        required: true
      responses:
        '200':
          description: Live radio details updated successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/admin/live-events:
    post:
      tags: [Administrator]
      summary: Create a live event
      description: Create a live event
      requestBody:
        description: Data for creating a live event
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: The name of the live event
                  type: string
                  example: The happenings in the society
                date:
                  description: The date of the live event
                  type: string
                  format: date
                  example: '2023-06-29'
                time:
                  description: The time of the live event (In the format HH:mm)
                  type: string
                  example: '14:00'
              required:
                - name
                - date
                - time
        required: true
      responses:
        '201':
          description: Live event created successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/admin/live-events/{liveEventId}:
    parameters:
      - name: liveEventId
        in: path
        description: The ID of the live event
        required: true
        schema:
          type: integer
          example: 1
    put:
      tags: [Administrator]
      summary: Update a live event
      description: Update a live event
      requestBody:
        description: Data for updating a live event
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: The name of the live event
                  type: string
                  example: The happenings in the society
                date:
                  description: The date of the live event
                  type: string
                  format: date
                  example: '2023-06-29'
                time:
                  description: The time of the live event (In the format HH:mm)
                  type: string
                  example: '14:00'
              required:
                - name
                - date
                - time
        required: true
      responses:
        '200':
          description: Live event updated successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Live event not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    delete:
      tags: [Administrator]
      summary: Delete a live event
      description: Delete a live event
      responses:
        '200':
          description: Live event deleted successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Live event not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/admin/adverts:
    get:
      tags: [Administrator]
      summary: Get adverts
      description: Get adverts
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    post:
      tags: [Administrator]
      summary: Create an advert
      description: Create an advert
      requestBody:
        description: Data for creating an advert
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  description: The display image of the advert
                  type: string
                  format: binary
                position:
                  description: The position of the advert on the webpage
                  type: string
                  enum:
                    - TOP
                    - LEFT
                    - RIGHT
                    - BOTTOM
                url:
                  description: The URL of the advert
                  type: string
                  example: https://ng.oraimo.com/oraimo-freepods-3-true-wireless-earbuds.html
              required:
                - image
                - position
                - url
        required: true
      responses:
        '201':
          description: Advert created successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
  /api/admin/adverts/{advertId}:
    parameters:
      - name: advertId
        in: path
        description: The ID of the advert
        required: true
        schema:
          type: integer
          example: 1
    get:
      tags: [Administrator]
      summary: Get an advert
      description: Get an advert
      responses:
        '200':
          description: Request successful
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Advert not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    post:
      tags: [Administrator]
      summary: Update an advert
      description: Update an advert
      requestBody:
        description: Data for updating an advert
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  description: The display image of the advert
                  type: string
                  format: binary
                position:
                  description: The position of the advert on the webpage
                  type: string
                  enum:
                    - TOP
                    - LEFT
                    - RIGHT
                    - BOTTOM
                url:
                  description: The URL of the advert
                  type: string
                  example: https://ng.oraimo.com/oraimo-freepods-3-true-wireless-earbuds.html
              required:
                - image
                - position
                - url
        required: true
      responses:
        '200':
          description: Advert updated successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Advert not found
        '422':
          description: Validation errors
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
    delete:
      tags: [Administrator]
      summary: Delete an advert
      description: Delete an advert
      responses:
        '200':
          description: Advert deleted successfully
        '401':
          description: Unauthenticated
        '403':
          description: Forbidden
        '404':
          description: Advert not found
        '500':
          description: Server error. Report to Developer
        default:
          description: Fallback for undocumented status code
          content:
            application/json:
              schema:
                type: object
      security:
        - httpBearer: []
components:
  securitySchemes:
    httpBearer:
      type: http
      description: Bearer token for authentication
      scheme: bearer
      bearerFormat: JWT
